import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
        testDataBuilderVersion = '0.5.0'
        dockerPluginVersion = '3.2.8'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url "https://repo.spring.io/release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.github.hippoom:test-data-builder:${testDataBuilderVersion}"
        classpath "com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

//apply from: "${rootProject.projectDir}/gradle/docker.gradle"

group = 'com.github.kbyyd24'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://repo.spring.io/release" }
}


ext {
    springCloudVersion = 'Finchley.RC1'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.cloud:spring-cloud-starter-contract-stub-runner')
    runtime("com.github.hippoom:test-data-builder:${testDataBuilderVersion}")
    compile("com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

docker {
    registryCredentials {
        username = "$System.env.DOCKER_USERNAME"
        password = "$System.env.DOCKER_PASSWORD"
        email = "$System.env.DOCKER_EMAIL"
    }
}

task buildStubDockerfile(type: Dockerfile, dependsOn: build) {
    doFirst {
        copy {
            from "${buildDir}/libs/${rootProject.name}-${version}.jar"
            into "${buildDir}/docker"
        }
    }
    from 'java'
    user 'root'
    addFile "${rootProject.name}-${version}.jar", "/root/stub-runner.jar"
    exposePort 9999
    defaultCommand "java", "-jar", "/root/stub-runner.jar"
}

task buildStubDockerImage(type: DockerBuildImage, dependsOn: buildStubDockerfile) {
    inputDir = file("${buildDir}/docker")
    tags = ["${System.env.DOCKER_USERNAME}/ldd-stub-runner:${version}" as String] as Set<String>
}

task pushStubDockerImage(type: DockerPushImage) {
    imageName = "${System.env.DOCKER_USERNAME}/ldd-stub-runner"
    tag = version as String
}